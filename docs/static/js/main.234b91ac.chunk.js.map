{"version":3,"sources":["components/add-card/add-card.js","components/search/result/search-result.js","components/search/results/search-results.js","components/search/search.js","components/search/search-hooks.js","components/card/card-reducers.js","components/card/card.js","components/cards/cards.js","components/counter/counter.js","components/app/app.js","constants/reducers.js","index.js"],"names":["AddCard","reactn_default","a","createElement","className","children","onClick","this","global","addCard","title","React","Component","SearchResult","_ref","multiverseid","name","onSelect","set","react_default","Results","search","_useGlobal","useGlobal","_useGlobal2","Object","slicedToArray","searchedCards","setSearchedCards","prototype","hasOwnProperty","call","response","useFetch","process","encodeURIComponent","e","Promise","message","objectSpread","defineProperty","Array","isArray","map","card","result_search_result","assign","key","forwardRef","ref","_useValue","onResult","_useState","useState","_useState2","value","setValue","handleChange","target","handleResultSelect","useValue","onChange","placeholder","type","react","fallback","search_results","toLowerCase","removeCardReducer","state","id","index","cards","findIndex","c","Error","concat","slice","length","updateCardReducer","Card","removeCard","searchRef","useRef","updateCard","onMouseEnter","current","focus","alt","height","src","width","components_search_search","result","Cards","components_card_card","add_card_add_card","reactn","Counter","props","remaining","PureComponent","withGlobal","App","Fragment","counter_counter","cards_cards","setGlobal","create","BLANK_CARD","addReducer","arguments","undefined","Date","now","cardId","toConsumableArray","ReactDOM","render","app_app","document","getElementById"],"mappings":"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","file":"static/js/main.234b91ac.chunk.js","sourcesContent":["import React from 'reactn';\r\nimport './add-card.scss';\r\n\r\n/*\r\nReactN reducer demo\r\n*/\r\n\r\n// Render a button that calls the global addCard reducer (with no parameters) on click.\r\nclass AddCard extends React.Component {\r\n  render () {\r\n    return (\r\n      <div className=\"card add-card\">\r\n        <button\r\n          children=\"+\"\r\n          className=\"add-card-button\"\r\n          onClick={this.global.addCard}\r\n          title=\"Add a new card.\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default AddCard;\r\n","import React from 'react';\r\nimport './search-result.scss';\r\n\r\n/*\r\nNo ReactN demo\r\n*/\r\n\r\n// Render each search result.\r\nconst SearchResult = ({ multiverseid, name, onSelect, set }) => {\r\n\r\n  // When the search result is clicked, inform the parent what card was selected.\r\n  const handleClick = () => {\r\n    onSelect({ multiverseid, name, set });\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"search-result\"\r\n      onClick={handleClick}\r\n      title={name}\r\n    >\r\n      ({set}) {name}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchResult;\r\n","import useFetch from 'fetch-suspense';\r\nimport React from 'react';\r\nimport { useGlobal } from 'reactn';\r\nimport Result from '../result/search-result';\r\n\r\nconst Results = ({ onSelect, search }) => {\r\n  const [ searchedCards, setSearchedCards ] = useGlobal('searchedCards');\r\n\r\n  // If the user entered something new, search for it using the API.\r\n  if (\r\n    search !== '' &&\r\n    !Object.prototype.hasOwnProperty.call(searchedCards, search)\r\n  ) {\r\n    let response;\r\n    try {\r\n      response = useFetch(process.env.REACT_APP_MTGJSON_API + '?q=' + encodeURIComponent(search));\r\n    }\r\n    catch (e) {\r\n      if (e instanceof Promise) {\r\n        throw e;\r\n      }\r\n      response = e.message;\r\n    }\r\n    setSearchedCards({\r\n      ...searchedCards,\r\n      [search]: response\r\n    });\r\n  }\r\n\r\n  // If the user has not searched for anything, or the API has no responded to this search,\r\n  //    do not display results yet.\r\n  if (\r\n    !search ||\r\n    !Object.prototype.hasOwnProperty.call(searchedCards, search)\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  // Grab the search result for this string from the global state.\r\n  // If the API responded with an array of cards, display each as a Result component.\r\n  if (Array.isArray(searchedCards[search])) {\r\n    return searchedCards[search].map(card =>\r\n      <Result\r\n        key={card.multiverseid}\r\n        onSelect={onSelect}\r\n        {...card}\r\n      />\r\n    );\r\n  }\r\n\r\n  // If the API responded with anything other than an array, display the error.\r\n  return (\r\n    <div\r\n      children={searchedCards[search]}\r\n      className=\"search-error\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import React, { Suspense } from 'react';\r\nimport Results from './results/search-results';\r\nimport './search.scss';\r\nimport { useValue } from './search-hooks';\r\n\r\n/*\r\nReactN hook demo\r\n*/\r\n\r\n// Render a search box to find cards by name.\r\nconst Search = ({ name, onResult }, ref) => {\r\n  const { handleChange, handleResultSelect, value } = useValue(name, onResult);\r\n\r\n  // Perform searches in lowercase.\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        onChange={handleChange}\r\n        placeholder=\"Card Name\"\r\n        ref={ref}\r\n        type=\"text\"\r\n        value={value}\r\n      />\r\n      <Suspense fallback=\"Loading...\">\r\n        <Results\r\n          onSelect={handleResultSelect}\r\n          search={value.toLowerCase()}\r\n        />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.forwardRef(Search);\r\n","import { useState } from 'react';\r\n\r\nexport const useValue = (name, onResult) => {\r\n\r\n  const [ value, setValue ] = useState(name);\r\n\r\n  // When the user types a value, update the controlled component,\r\n  //   then update the global state by fetching the search results\r\n  //   with the global searchCard reducer.\r\n  const handleChange = e => {\r\n    setValue(e.target.value);\r\n  };\r\n\r\n  // When the user selects a card, update the search box to share that card's name,\r\n  //   then inform the parent component which card was selected.\r\n  const handleResultSelect = card => {\r\n    setValue(card.name);\r\n    onResult(card);\r\n  };\r\n\r\n  return {\r\n    handleChange,\r\n    handleResultSelect,\r\n    value\r\n  };\r\n};\r\n","// Remove a card.\r\nexport const removeCardReducer = (state, id) => {\r\n\r\n  // Find the card with the given ID.\r\n  const cardId = c => c.id === id;\r\n  const index = state.cards.findIndex(cardId);\r\n  if (index === -1) {\r\n    throw new Error(`Card ID ${id} cannot be found.`);\r\n  }\r\n\r\n  // Return a global state that does not contain the given card.\r\n  return {\r\n    ...state,\r\n    cards:\r\n      state.cards.slice(0, index)\r\n      .concat(\r\n        state.cards.slice(index + 1, state.cards.length + 1)\r\n      )\r\n  };\r\n};\r\n\r\n// Update a Card\r\nexport const updateCardReducer = (state, id, card) => {\r\n\r\n  // Find the card with the given ID.\r\n  const cardId = c => c.id === id;\r\n  const index = state.cards.findIndex(cardId);\r\n  if (index === -1) {\r\n    throw new Error(`Card ID ${id} cannot be found.`);\r\n  }\r\n\r\n  // Return a new state that replaces the given card with a new one.\r\n  return {\r\n    ...state,\r\n    cards:\r\n      state.cards.slice(0, index)\r\n      .concat([\r\n        {\r\n          id,\r\n          ...card\r\n        }\r\n      ])\r\n      .concat(\r\n        state.cards.slice(index + 1, state.cards.length + 1)\r\n      )\r\n  };\r\n};\r\n","import React, { useRef } from 'react';\r\nimport { useGlobal } from 'reactn';\r\nimport Search from '../search/search';\r\nimport './card.scss';\r\nimport { removeCardReducer, updateCardReducer } from './card-reducers';\r\n\r\n/*\r\nReactN custom reducer hook demo\r\nReactN global reducer hook demo\r\n*/\r\n\r\n// Display a card.\r\nconst Card = ({ id, multiverseid, name, set }) => {\r\n  const addCard = useGlobal('addCard');\r\n  const removeCard = useGlobal(removeCardReducer);\r\n  const searchRef = useRef(null);\r\n  const updateCard = useGlobal(updateCardReducer);\r\n\r\n  // When the Copy button is clicked, add a copy of this card using the global addCard reducer.\r\n  const handleAdd = () => {\r\n    addCard({ multiverseid, name, set });\r\n  };\r\n\r\n  // Automatically focus the input field.\r\n  const handleMouseEnter = () => {\r\n    searchRef.current.focus();\r\n  };\r\n\r\n  // When the user selects a search result, update this card to be the selected result\r\n  //   by using the updateCard global reducer.\r\n  const handleSearchResult = result => {\r\n    updateCard(id, result);\r\n  };\r\n\r\n  // When the Remove button is clicked, remove this card using the global removeCard reducer.\r\n  const handleSubtract = () => {\r\n    removeCard(id);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"card\"\r\n      onMouseEnter={handleMouseEnter}\r\n    >\r\n      {\r\n        // If a card is selected, render it.\r\n        multiverseid ?\r\n          <img\r\n            alt={name}\r\n            className=\"card-image\"\r\n            height=\"100%\"\r\n            src={'https://i.mtgeni.us/' + multiverseid + '.png'}\r\n            width=\"100%\"\r\n          /> :\r\n          null\r\n      }\r\n      <span\r\n        children=\"+\"\r\n        className=\"card-add\"\r\n        onClick={handleAdd}\r\n        title=\"Copy this card.\"\r\n      />\r\n      <Search\r\n        name={name || ''}\r\n        onResult={handleSearchResult}\r\n        ref={searchRef}\r\n      />\r\n      <span\r\n        children=\"-\"\r\n        className=\"card-subtract\"\r\n        onClick={handleSubtract}\r\n        title=\"Remove this card.\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport reactn from 'reactn';\r\nimport AddCard from '../add-card/add-card';\r\nimport Card from '../card/card';\r\nimport './cards.scss';\r\n\r\n/*\r\nReactN decorator demo\r\n*/\r\n\r\n// Render all cards in the global state, plus an additional Add Card button.\r\nclass Cards extends React.Component {\r\n\r\n  render() {\r\n\r\n    // For each card in the global state, render a Card component.\r\n    return (\r\n      <div className=\"cards\">\r\n        {this.global.cards.map(card =>\r\n          <Card\r\n            key={card.id}\r\n            {...card}\r\n          />\r\n        )}\r\n        <AddCard />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default reactn(Cards);\r\n","import React from 'react';\r\nimport { withGlobal } from 'reactn';\r\nimport './counter.scss';\r\n\r\n/*\r\nReactN withGlobal demo\r\n*/\r\n\r\nconst PER_PAGE = 9;\r\n\r\n// Tell the user how many more cards are needed to make a multiple of 9.\r\nclass Counter extends React.PureComponent {\r\n\r\n  render() {\r\n\r\n    // If the user has a multiple of 9 cards, do not display anything.\r\n    if (this.props.remaining === 0) {\r\n      return null;\r\n    }\r\n\r\n    // Tell the user how many more cards are needed to make a multiple of 9.\r\n    return (\r\n      <div className=\"counter\">\r\n        Add{' '}\r\n        <strong children={this.props.remaining} />{' '}\r\n        more.\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default withGlobal(global => {\r\n  const remaining = PER_PAGE - global.cards.length % PER_PAGE;\r\n  if (remaining === PER_PAGE) {\r\n    return { remaining: 0 };\r\n  }\r\n  return { remaining };\r\n})(Counter);\r\n","import React from 'react';\r\nimport Cards from '../cards/cards';\r\nimport Counter from '../counter/counter';\r\nimport './app.scss';\r\n\r\n/*\r\nNo ReactN demo\r\n*/\r\n\r\nconst App = () =>\r\n  <>\r\n    <header>\r\n      <h1>Magic: The Gathering Card Proxies</h1>\r\n      <Counter />\r\n    </header>\r\n    <main>\r\n      <Cards />\r\n    </main>\r\n  </>;\r\n\r\nexport default App;\r\n","import { addReducer, setGlobal } from 'reactn';\r\n\r\nsetGlobal({\r\n  cards: [],\r\n  searchedCards: Object.create(null)\r\n});\r\n\r\n// Add a Card\r\nconst BLANK_CARD = Object.create(null);\r\naddReducer('addCard', (state, card = BLANK_CARD) => {\r\n\r\n  // Generate a unique ID for this card.\r\n  let id = Date.now();\r\n  const cardId = c => c.id === id;\r\n  while (state.cards.findIndex(cardId) !== -1) {\r\n    id++;\r\n  }\r\n\r\n  // Return a global state that contains this new card.\r\n  return {\r\n    ...state,\r\n    cards: [\r\n      ...state.cards,\r\n      {\r\n        id,\r\n        ...card\r\n      }\r\n    ]\r\n  };\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app/app';\r\nimport './constants/reducers';\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}