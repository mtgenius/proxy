{"version":3,"sources":["components/card/card.tsx","components/cards/cards.tsx","components/input/input.tsx","serviceWorker.ts","index.tsx","components/app/app.tsx"],"names":["Card","children","src","replace","className","alt","height","width","Cards","onClose","onClick","split","map","card","Input","onChange","onSubmit","count","length","isSubmitDisabled","submitValue","React","useMemo","handleFormSubmit","useCallback","e","preventDefault","handleTextareaChange","currentTarget","value","action","cols","placeholder","rows","disabled","type","Boolean","window","location","hostname","match","ReactDOM","render","useState","input","setInput","showInput","setShowInput","handleCardsClose","handleInputSubmit","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAOe,SAASA,EAAT,GAAkD,IAAlCC,EAAiC,EAAjCA,SACvBC,EAAcD,EAASE,QAAQ,0BAA2B,cAEhE,OACE,yBAAKC,UAAU,QACb,yBAAKC,IAAKJ,EAAUK,OAAO,OAAOJ,IAAKA,EAAKK,MAAM,U,MCHzC,SAASC,EAAT,GAA4D,IAA3CP,EAA0C,EAA1CA,SAAUQ,EAAgC,EAAhCA,QACxC,OACE,yBAAKL,UAAU,SACb,4BAAQM,QAASD,GAAjB,QACA,6BACGR,EAASU,MAAM,MAAMC,KACpB,SAACC,GAAD,OACE,kBAACb,EAAD,KAAOa,Q,MCHJ,SAASC,EAAT,GAIU,IAHvBb,EAGsB,EAHtBA,SACAc,EAEsB,EAFtBA,SACAC,EACsB,EADtBA,SAEMC,EAAgBhB,EAASU,MAAM,MAAMO,OAErCC,EAA4BF,EAAQ,EAAI,EAExCG,EAAsBC,IAAMC,SAAQ,WACxC,OAAIH,EACI,OAAN,OAAc,EAAKF,EAAQ,GAEpB,WAER,CAACA,EAAOE,IAELI,EAAmBF,IAAMG,aAC7B,SAACC,GACCA,EAAEC,iBACFV,MAEF,CAACA,IAGGW,EAAuBN,IAAMG,aACjC,SAACC,GACCV,EAASU,EAAEG,cAAcC,SAE3B,CAACd,IAGH,OACE,0BAAMe,OAAO,IAAI1B,UAAU,QAAQY,SAAUO,GAC3C,8BACEQ,KAAM,GACNhB,SAAUY,EACVK,YAzCS,kFA0CTC,KAAM,GACNJ,MAAO5B,IAET,2BAAOiC,SAAUf,EAAkBgB,KAAK,SAASN,MAAOT,K,MC1C1CgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCFD,WAA8B,IAAD,EAChBrB,IAAMsB,SAAiB,IADP,mBACnCC,EADmC,KAC5BC,EAD4B,OAERxB,IAAMsB,UAAkB,GAFhB,mBAEnCG,EAFmC,KAExBC,EAFwB,KAIpCC,EAAmB3B,IAAMG,aAAY,WACzCuB,GAAa,KACZ,IAEGE,EAAoB5B,IAAMG,aAAY,WAC1CuB,GAAa,KACZ,IAEH,OACE,yBAAK3C,UAAU,OACb,qCACC0C,EACC,kBAAChC,EAAD,CAAOC,SAAU8B,EAAU7B,SAAUiC,GAClCL,GAGH,kBAACpC,EAAD,CAAOC,QAASuC,GAAmBJ,MDlB3B,MAASM,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bfc9b562.chunk.js","sourcesContent":["import React, { ReactElement } from 'react';\nimport './card.scss';\n\ninterface Props {\n  children: string;\n}\n\nexport default function Card({ children }: Props): ReactElement {\n  const src: string = children.replace(/-(?:medium|thumb)\\.jpg$/, '-large.jpg');\n\n  return (\n    <div className=\"card\">\n      <img alt={children} height=\"100%\" src={src} width=\"100%\" />\n    </div>\n  );\n}\n","import React, { ReactElement } from 'react';\nimport { Card } from '..';\nimport './cards.scss';\n\ninterface Props {\n  children: string;\n  onClose(): void;\n}\n\nexport default function Cards({ children, onClose }: Props): ReactElement {\n  return (\n    <div className=\"cards\">\n      <button onClick={onClose}>Back</button>\n      <div>\n        {children.split('\\n').map(\n          (card: string): ReactElement => (\n            <Card>{card}</Card>\n          ),\n        )}\n      </div>\n    </div>\n  );\n}\n","import React, { ChangeEvent, FormEvent, ReactElement } from 'react';\nimport './input.scss';\n\ninterface Props {\n  children: string;\n  onChange(input: string): void;\n  onSubmit(): void;\n}\n\nconst PLACEHOLDER = `https://i.mtgeni.us/1.png\nhttps://i.mtgeni.us/2.png\nhttps://i.mtgeni.us/3.png`;\n\nexport default function Input({\n  children,\n  onChange,\n  onSubmit,\n}: Props): ReactElement {\n  const count: number = children.split('\\n').length;\n\n  const isSubmitDisabled: boolean = count % 9 > 0;\n\n  const submitValue: string = React.useMemo((): string => {\n    if (isSubmitDisabled) {\n      return `Add ${9 - (count % 9)}`;\n    } else {\n      return 'Submit';\n    }\n  }, [count, isSubmitDisabled]);\n\n  const handleFormSubmit = React.useCallback(\n    (e: FormEvent<HTMLFormElement>): void => {\n      e.preventDefault();\n      onSubmit();\n    },\n    [onSubmit],\n  );\n\n  const handleTextareaChange = React.useCallback(\n    (e: ChangeEvent<HTMLTextAreaElement>): void => {\n      onChange(e.currentTarget.value);\n    },\n    [onChange],\n  );\n\n  return (\n    <form action=\"#\" className=\"input\" onSubmit={handleFormSubmit}>\n      <textarea\n        cols={42}\n        onChange={handleTextareaChange}\n        placeholder={PLACEHOLDER}\n        rows={12}\n        value={children}\n      />\n      <input disabled={isSubmitDisabled} type=\"submit\" value={submitValue} />\n    </form>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { ReactElement } from 'react';\nimport { Cards, Input } from '..';\nimport './app.scss';\n\nexport default function App(): ReactElement {\n  const [input, setInput] = React.useState<string>('');\n  const [showInput, setShowInput] = React.useState<boolean>(true);\n\n  const handleCardsClose = React.useCallback((): void => {\n    setShowInput(true);\n  }, []);\n\n  const handleInputSubmit = React.useCallback((): void => {\n    setShowInput(false);\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <h1>Proxy</h1>\n      {showInput ? (\n        <Input onChange={setInput} onSubmit={handleInputSubmit}>\n          {input}\n        </Input>\n      ) : (\n        <Cards onClose={handleCardsClose}>{input}</Cards>\n      )}\n    </div>\n  );\n}\n"],"sourceRoot":""}